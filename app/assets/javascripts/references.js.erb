$(function () {
  setupIcons();
  setupButtons();
  if (AntCat.user_can_edit) {
    setupEdits();
  }
})

function setupButtons() {
  $('.review_buttons input[type=submit]').button()
  $('.default_reference_status input[type=submit]').button()
  $('#approve_all_button').button().on('click', approveHandler);
}

/////////////////////////////////////////////////////////////////////////

function setupIcons() {
  setupIconVisibility()
  if (AntCat.user_can_edit) {
    setupIconClickHandlers()
  }
}

function setupIconVisibility() {
  if (!AntCat.user_can_edit)
    return

  if (AntCat.testing)
    $('.icon').show();

  $('body').on('mouseenter', '.reference',
      function () {
        if (!isEditing())
          $('.icon', $(this)).show();
      }).on('mouseleave', '.reference',
      function () {
        $('.icon').hide();
      });
}

function setupIconClickHandlers() {
  $('body').on('click', '.edit_icon', editReference);
  $('body').on('click', '.icon.delete', deleteReference);
}

function setupEdits() {
  $('body').on('click', '.reference_edit .submit', submitReferenceEdit);
  $('body').on('click', '.reference_edit .cancel', cancelReferenceEdit);
  $('body').on('click', '.reference_edit .delete', deleteReference);
}

///////////////////////////////////////////////////////////////////////////////////

function approveHandler() {
  var r = confirm("Mark all citations as reviewed? This operation cannot be undone!");
  if (r == true) {
    return window.location.href = '/references/approve_all';
  }
}

function editReference() {
  if (isEditing())
    return false;

  $reference = $(this).closest('.reference');
  saveReference($reference);
  showReferenceEdit($reference, {showDeleteButton: true});
  return false;
}

function deleteReference() {
  $reference = $(this).closest('.reference');
  $reference.addClass('about_to_be_deleted');
  if (confirm(AntCat.delete_confirmation_message)) {
    $.post($reference.find('form').attr('action'), {'_method': 'delete'},
        function (data) {
          if (data.success) {
            $reference.closest('tr').remove();
            removeSavedReference()
          } else
            alert(data.message);
        });
  }
  $reference.removeClass('about_to_be_deleted');
  return false;
}

///////////////////////////////////////////////////////////////////////////////////

function saveReference($reference) {
  $('#saved_reference').remove()
  $reference.clone(true)
      .attr('id', 'saved_reference')
      .appendTo('body')
      .hide()
}

function restoreReference($reference) {
  var id = $reference.attr('id');
  $reference.replaceWith($('#saved_reference'))
  $('#saved_reference').attr('id', id).show()
}

function removeSavedReference() {
  $('#saved_reference').remove()
}

function showReferenceEdit($reference, options) {
  if (!options)
    options = {}

  $('.reference_display', $reference).hide();
  if (!AntCat.testing)
    $('.icon').hide()

  var $edit = $('.reference_edit', $reference);

  if (!options.showDeleteButton)
    $('.delete', $edit).hide();

  setupTabs($reference);

  setupReferenceEditAuthorAutocomplete($reference);
  setupReferenceEditJournalAutocomplete($reference);
  setupReferenceEditPublisherAutocomplete($reference);

  $edit.show();

  $('#reference_author_names_string', $edit)[0].focus();
}

function setupTabs($reference) {
  var id = $reference.attr('id');
  // selected_tab is set in references/_edit.html.haml
  var selected_tab = $('.selected_tab', $reference).val();

  $('.tabs .article-tab', $reference).attr('href', '#reference_article' + id);
  $('.tabs .article-tab-section', $reference).attr('id', 'reference_article' + id);

  $('.tabs .book-tab', $reference).attr('href', '#reference_book' + id);
  $('.tabs .book-tab-section', $reference).attr('id', 'reference_book' + id);

  $('.tabs .nested-tab', $reference).attr('href', '#reference_nested' + id);
  $('.tabs .nested-tab-section', $reference).attr('id', 'reference_nested' + id);

  $('.tabs .unknown-tab', $reference).attr('href', '#reference_unknown' + id);
  $('.tabs .unknown-tab-section', $reference).attr('id', 'reference_unknown' + id);

  // This line initializes the jquery_ui tabs object with the selected_tab highlighted
  $('.tabs', $reference).tabs();
  // Activates the relevant tab for this article
  $('.tabs', $reference).tabs("option", "active", selected_tab);
}

////////////////////////////////////////////////////////////////////////////////

function submitReferenceEdit() {
  $(this).closest('form').ajaxSubmit({
    beforeSerialize: beforeSerialize,
    beforeSubmit: setupSubmit,
    success: updateReference,
    dataType: 'json'
  });
  return false;
}

function beforeSerialize($form, options) {
  var selectedTab = $.trim($('.ui-tabs-active', $form).text())
  $('#selected_tab', $form).val(selectedTab)
  return true;
}

function setupSubmit(formData, $form, options) {
  var $spinnerElement = $('button', $form).parent();
  $spinnerElement.spinner({position: 'left', img: "<%= asset_path('ui-anim_basic_16x16.gif') %>"});
  $('input', $spinnerElement).attr('disabled', 'disabled');
  $('button', $spinnerElement).attr('disabled', 'disabled');
  return true;
}

function updateReference(data, statusText, xhr, $form) {
  var $reference = $('#reference_' + (data.isNew ? '' : data.id));

  var $edit = $('.reference_edit', $reference);

  var $spinnerElement = $('button', $edit).parent();
  $('input', $spinnerElement).attr('disabled', '');
  $('button', $spinnerElement).attr('disabled', '');
  $spinnerElement.spinner('remove');

  $reference.parent().html(data.content);

  if (!data.success) {
    $reference = $('#reference_' + (data.isNew ? '' : data.id));
    showReferenceEdit($reference);
    return;
  }

  $reference = $('#reference_' + data.id);
  $('.reference_edit', $reference).hide();

  if (AntCat.testing)
    $('.icon', $reference).show();

  $('.reference_display', $reference)
      .show()
      .effect("highlight", {}, 3000)
}

function cancelReferenceEdit() {
  $reference = $(this).closest('.reference');
  if ($reference.attr('id') == 'reference_')
    $reference.closest('tr').remove();
  else {
    id = $reference.attr('id')
    restoreReference($reference);
    $reference = $('#' + id);
    $('.reference_display', $reference)
        .show()
        .effect("highlight", {}, 3000);
    if (AntCat.testing)
      $('.icon', $reference).show();
  }
  return false;
}

////////////////////////////////////////////////////////////////////////////////

function isEditing() {
  return $('.reference_edit').is(':visible');
}