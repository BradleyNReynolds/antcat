grammar Bolton::SubfamilyCatalogSubfamilyGrammar
  include Bolton::CatalogGrammar

  rule subfamily_section
    subfamily_centered_header | subfamily_header | 
    tribes_list | genera_list | collective_group_name_list |
    tribe_header | genera_incertae_sedis_header |
    genera_header
  end

  rule subfamily_centered_header
    (bold span 'SUBFAMILY' close_tags red uppercase_word close_tags) {
      {:type => :subfamily_centered_header}
    }
  end

  rule subfamily_header
    (bold span 'Subfamily ' fossil_flag? red uppercase_word close_tags) {
      value = {:type => :subfamily_header, :name => uppercase_word.downcase.capitalize.strip}
      value.merge! :fossil => true if fossil_flag.present?
      value
    }
  end

  rule tribes_list
    (bold span 'Tribe' 's'? ' ' ('(extinct) '|'(extant) ')?  (incertae_sedis_in | 'of ') capitalized_word close_tags ': ' text /.*/) {
      value = {:type => :tribes_list}
      value[:tribes] = text.split(', ').map do |tribe|
        fossil = tribe.gsub!(/\*/, '') && true
        [tribe, fossil]
      end
      value.merge! :incertae_sedis => true if incertae_sedis_in.present?
      value
    } 
  end

  rule genera_list
    (bold span ('Hong (2002) genera '|'Genera '|'Genus ') extinct_or_extant:('(extinct) '|'(extant) ')? (incertae_sedis_in | 'of ') capitalized_word close_tags ': ' '*'? italic text /.*/) {
      value = {:type => :genera_list}
      value[:genera] = text.split(', ').map do |genus|
        fossil = (genus.gsub!(/\*/, '') || extinct_or_extant.to_s =~ /extinct/) ? true : nil
        [genus, fossil]
      end
      value.merge! :incertae_sedis => true if incertae_sedis_in.present?
      value
    } 
  end

  rule collective_group_name_list
    (bold span 'Collective group name in ' capitalized_word close_tags ': ' fossil_tag:'*'? italic text /.*/) {
      value = {:type => :collective_group_name_list}
      value[:names] = text.split(', ').map do |name|
        fossil = (name.gsub!(/\*/, '') || fossil_tag.present?) ? true : nil
        [name, fossil]
      end
      value
    } 
  end

  rule tribe_header
    (bold span 'Tribe' close_tags fossil_flag? bold? red uppercase_word close_tags) {
      value = {:type => :tribe_header, :name => uppercase_word.downcase.capitalize.strip}
      value.merge! :fossil => true if fossil_flag.present?
      value
    }
  end

  rule genera_incertae_sedis_header
    'asdf'
  end

  rule genera_header
    (bold span ('Genera '|'Genus ') 'of ' red capitalized_word close_tags) {
      {:type => :genera_header}
    }
  end

end
