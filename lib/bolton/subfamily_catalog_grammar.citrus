grammar Bolton::SubfamilyCatalogGrammar
  include Bolton::CatalogGrammar

  rule subfamily_catalog
    family | a_supersubfamily_header | subfamily_header | subfamily | tribe | genus | incertae_sedis_header | other
  end

  rule family
    family_header | extant_subfamilies | extinct_subfamilies | extant_genera_sedis_in_family | extinct_genera_sedis_in_family | extant_genera_excluded_from_family | extinct_genera_excluded_from_family
  end

  rule family_header
    (bold span 'FAMILY FORMICIDAE' close_tags) {
      {:type => :family_header}
    }
  end

  rule extant_subfamilies
    (bold span 'Subfamilies of Formicidae (extant)' close_tags ': ' text /.*/) {
      {:type => :extant_subfamilies, :subfamilies => text.split(', ')}
    } 
  end

  rule extinct_subfamilies
    (bold span 'Subfamilies of Formicidae (extinct)' close_tags ': ' text /.*/) {
      {:type => :extinct_subfamilies, :subfamilies => text.split(', ').map {|e| e.gsub(/\*/, '')}}
    } 
  end

  rule extant_genera_sedis_in_family
    (bold span 'Genera (extant) ' italic 'incertae sedis' tag_end ' in Formicidae' close_tags ': ' italic text /.*/) {
      {:type => :extant_genera_incertae_sedis_in_family, :genera => text.split(', ')}
    } 
  end

  rule extinct_genera_sedis_in_family
    (bold span 'Genera (extinct) ' italic 'incertae sedis' tag_end ' in Formicidae' close_tags ': ' italic text /.*/) {
      {:type => :extinct_genera_incertae_sedis_in_family, :genera => text.split(', ').map {|e| e.gsub(/\*/, '')}}
    } 
  end

  rule extant_genera_excluded_from_family
    (bold span 'Genera (extant) excluded from Formicidae' close_tags ': ' italic green text /.*/) {
      {:type => :extant_genera_excluded_from_family, :genera => text.split(', ')}
    } 
  end

  rule extinct_genera_excluded_from_family
    (bold span 'Genera (extinct) excluded from Formicidae' close_tags ': *' italic green text /.*/) {
      {:type => :extinct_genera_excluded_from_family, :genera => text.split(', ').map {|e| e.gsub(/\*/, '')}}
    } 
  end

  rule subfamily
    (bold span 'Subfamily ' fossil_flag? red uppercase_word close_tags) {
      value = {:type => :subfamily, :name => uppercase_word.downcase.capitalize.strip}
      value.merge! :fossil => true if fossil_flag.present?
      value
    }
  end

  rule genus
    (
      (span 'Genus' s fossil_flag? bold italic red uppercase_word close_tags '[Myrmeciinae]' close_tags) |
      (bold italic? span 'Genus' close_tags fossil_flag? close_tags? bold? italic? red s uppercase_word close_tags)
    ) {
      value = {:type => :genus, :name => uppercase_word.downcase.capitalize.strip}
      value.merge! :fossil => true if fossil_flag.present?
      value
    }
  end

  rule tribe
    (bold span 'Tribe' close_tags fossil_flag? bold? red uppercase_word close_tags) {
      value = {:type => :tribe, :name => uppercase_word.downcase.capitalize.strip}
      value.merge! :fossil => true if fossil_flag.present?
      value
    }
  end

  rule incertae_sedis_header
    incertae_sedis_in_family_header | incertae_sedis_in_tribe_header | incertae_sedis_in_subfamily_header
  end

  rule incertae_sedis_in_family_header
    (bold span ('Genus '|'Genera ') italic 'incertae sedis' tag_end ' in ' red capitalized_word close_tags) {
      {:type => :incertae_sedis_in_tribe_header}
    }
  end

  rule incertae_sedis_in_tribe_header
    (bold span 'Genera ' italic 'incertae sedis' tag_end ' in ' red 'FORMICIDAE' close_tags) {
      {:type => :incertae_sedis_in_family_header}
    }
  end

  rule incertae_sedis_in_subfamily_header
    (bold span ('Genus ' | 'Genera of Hong (2002), ' | 'Genera ') '(extinct) '? italic 'incertae sedis' tag_end ' in ' red uppercase_word close_tags) {
      {:type => :incertae_sedis_in_subfamily_header}
    }
  end

  rule subfamily_header
    (bold span 'SUBFAMILY' close_tags red uppercase_word close_tags) {
      {:type => :subfamily_header}
    }
  end

  rule a_supersubfamily_header
    (bold span ('THE '|'EXTINCT') /.*?(SUBFAMILIES|SUBFAMILY).*/) {
      {:type => :supersubfamily_header}
    }
  end

  rule other
    /.*/ {
      {:type => :other}
    }
  end

end
