require 'spec_helper'

describe TaxonForm do
  include RefactorTaxonFactoriesHelpers

  before do
    fake_current_user
  end

  describe "#save" do
    describe "saving a new records" do
      describe "Creating a Change" do
        context "when a taxon is added" do
          let!(:taxon) { build :subfamily }

          it "creates a Change pointing to the version of Taxon" do
            expect do
              with_versioning { described_class.new(taxon, genus_params).save }
            end.to change { Change.count }.from(0).to(1)
            expect(Change.first.taxon_id).to eq taxon.versions.reload.last.item_id
          end
        end

        context "when a taxon is edited" do
          let(:genus) { create :family }

          it "creates a Change for an edit" do
            expect do
              with_versioning { described_class.new(genus, genus_params).save }
            end.to change { Change.count }.from(0).to(1)
            expect(Change.first.change_type).to eq 'update'
          end
        end
      end
    end

    # Mainly tested in `callbacks_and_validations_spec.rb`.
    describe "stuff from Taxa::CallbacksAndValidations" do
      describe "Taxon#save_children" do
        let!(:species) { create :species }
        let!(:genus) { Taxon.find species.genus.id }
        let!(:tribe) { Taxon.find genus.tribe.id }
        let!(:subfamily) { Taxon.find species.subfamily.id }

        context "when taxon is the `save_initiator`" do
          it "saves the children" do
            # Save these:
            expect_any_instance_of(Genus).to receive(:save!).and_call_original
            expect_any_instance_of(Genus).to receive(:save_children).and_call_original

            expect_any_instance_of(Species).to receive(:save).and_call_original
            expect_any_instance_of(Species).to receive(:save_children).and_call_original

            # Should not be saved:
            [Family, Subfamily, Tribe].each do |klass|
              expect_any_instance_of(klass).not_to receive(:save_children).and_call_original
              expect_any_instance_of(klass).not_to receive(:save).and_call_original
            end

            described_class.new(genus, genus_params).save
          end
        end
      end

      describe "Taxon#remove_auto_generated" do
        include MarkAsAutogeneratedHelpers

        let!(:genus) { create :genus }
        let!(:another_genus) { create :genus }
        let!(:synonym) { create :synonym, senior_synonym: genus, junior_synonym: another_genus }
        let!(:actors) { [genus, genus.name, synonym] }

        before { mark_as_auto_generated actors }

        it "removes 'auto_generated' flags from things" do
          described_class.new(genus, genus_params).save

          actors.each &:reload

          expect(genus).not_to be_auto_generated
          expect(synonym).not_to be_auto_generated
          expect(genus.name).not_to be_auto_generated
        end
      end

      context "#set_taxon_state_to_waiting" do
        let(:genus) { create :genus }

        before do
          genus.taxon_state.update_columns review_state: TaxonState::OLD
          genus.reload
          expect(genus).to be_old
        end

        it "changes the review state" do
          described_class.new(genus, genus_params).save
          expect(genus).not_to be_old
        end
      end
    end
  end
end

def taxon_params
  HashWithIndifferentAccess.new(
    name_attributes: {},
    status: Status::VALID,
    protonym_attributes: {
      name_attributes:  {},
      authorship_attributes: {
        reference_id: create(:article_reference).id
      }
    }
  )
end

def genus_params
  params = taxon_params
  params[:name_attributes][:id] = create(:genus_name, name: 'Atta').id
  params[:protonym_attributes][:name_attributes][:id] = create(:genus_name, name: 'Betta').id
  params[:type_name_attributes] = { id: create(:species_name, name: 'Betta major').id }
  params
end
